name: Auto Release

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  check_commit_message:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Commit Message
        id: check
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          if [[ "$COMMIT_MESSAGE" =~ ^chore:\ release\ v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check_commit_message]
    if: needs.check_commit_message.outputs.is_release == 'true'


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Extract Version from Commit and Validate SemVer
        id: version
        run: |
          COMMIT_VERSION=$(git log -1 --pretty=format:"%s" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?')

          if [[ -z "$COMMIT_VERSION" ]]; then
            echo "❌ Invalid SemVer version in commit message"
            exit 1
          fi

          echo "VERSION=$COMMIT_VERSION" >> $GITHUB_ENV

          # Ensure the version is valid SemVer
          if [[ -z "$COMMIT_VERSION" ]]; then
            echo "❌ Invalid SemVer version in commit message"
            exit 1
          fi

          echo "VERSION=$COMMIT_VERSION" >> $GITHUB_ENV

      - name: Check if Version Matches package.json
        id: package_version
        run: |
          PACKAGE_VERSION=$(node -p 'require("./package.json").version')

          if [[ "$PACKAGE_VERSION" != "${{ env.VERSION }}" ]]; then
            echo "❌ Version mismatch: Commit version (${{ env.VERSION }}) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

          echo "✅ Version match confirmed: $PACKAGE_VERSION"

      - name: Generate Release Notes
        run: tsx src/main.ts  # Generates RELEASE_NOTES.md

      - name: Check if Pre-release
        id: prerelease
        run: |
          if [[ "${{ env.VERSION }}" == *"-rc"* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [release]  # Runs only if the release was successful
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org/'

      - name: Install Dependencies
        run: npm install

      - name: Build Package
        run: npm run build

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-and-push-ghcr:
    name: Build & Push to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: [release]  # Runs only if the release was successful
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/simple-conventional-release:latest
            ghcr.io/${{ github.repository_owner }}/simple-conventional-release:${{ env.VERSION }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/simple-conventional-release:buildcache
          cache-to: type=inline

      - name: Image Build Successful
        run: echo "🚀 Docker image pushed successfully to GHCR with version ${{ env.VERSION }}!"
